const cartModel = require("../models/cartModel");
const productModel = require("../models/productModel");
const { isValidRequest, isValidId } = require("../validator/validation");

const addToCart = async function (req, res) {
  try {
    let userId = req.user._id;

    //Validation of request Body
    if (!isValidRequest(req.body)) {
      return res
        .status(400)
        .send({ status: false, message: "Enter valid input" });
    }

    //Destructuring Keys from request body into distinct variables
    let { cartId, productId, quantity } = req.body;
    let cart = {totalPrice:0, items:[]};

    //Validation of ProductId
    if (!productId) {
      return res
        .status(400)
        .send({
          status: false,
          message: "Product Id is mandatory to add the product",
        });
    }
    if (!isValidId(productId)) {
      return res
        .status(400)
        .send({
          status: false,
          message: "Enter valid format of product id as of objectId",
        });
    }

    //Searching for product in database
    const productExist = await productModel.findOne({
      _id: productId,
      isDeleted: false
    });
    if (!productExist) {
      return res
        .status(404)
        .send({ status: false, message: "Product not found" });
    }

    //Searching if cart exist in database
    let cartExist = await cartModel.findOne({ userId: userId});

    //Validation of quantity if present
   if(quantity != undefined){
      if (!/^[1-9]+[0]*$/.test(quantity)) {
        return res
        .status(400)
        .send({status: false, message: "Atleast one quantity should be there"});
    }
  }
   

    //=====================================================TO CREATE CART=====================================================
    if (!cartExist) {
        cart.userId = userId;

        // Giving the value of quantity
        if (quantity == undefined){
          cart.items.push({
            productId: productId,
            quantity: 1,
        })
        }else{
          cart.items.push({
              productId: productId,
              quantity: quantity,
          });
        }
        cart.totalPrice =  productExist.price*cart.items[0].quantity;
        cart.totalItems = 1;
        await cartModel.create(cart);
        const finalCart = await cartModel.findOne(cart).populate({path:'items.productId',select:{_id: 1,title:1, price: 1,productImage:1, description:1}})
        return res
        .status(201)
        .send({ status: true, message: "Successful", data: finalCart });
    }
    

    //==================================================TO ADD PRODUCT TO CART=====================================================
    
    if(cartId){

      //Validation of cartId if present
      if(!isValidId(cartId)){
        return res
          .status(400)
          .send({ status: false, message: "Enter valid cartId format as generated by mongo db" })
      }else if(cartExist._id.toString() != cartId){
        return res
          .status(400)
          .send({ status: false, message: "Cart is not for the user requesting" })
      }
    }
    //Adding product and quantity to cart
      let flag =0
      for(j=0; j<cartExist.items.length; j++){
        let id = cartExist.items[j].productId
        if(id == productId){
          flag =1
          if(quantity== undefined){
            cartExist.items[j].quantity += 1
            cartExist.totalPrice += productExist.price*1
          }else{
            cartExist.items[j].quantity += quantity
            cartExist.totalPrice += productExist.price*quantity 
          }
            
        }
      }
      if(flag == 0){
        if(quantity == undefined){
          cartExist.items.push({productId: productId, quantity: 1})
          cartExist.totalPrice += productExist.price*1
        }else{
          cartExist.items.push({productId: productId, quantity: quantity})
          cartExist.totalPrice += productExist.price*quantity 
        }
        cartExist.totalItems += 1
      }
      
      const updateCart = await cartModel.findOneAndUpdate({userId: userId},{$set: cartExist},{new: true}).populate({path:'items.productId',select:{_id: 1,title:1, price: 1,productImage:1, description:1}})
      return res
      .status(200)
      .send({ status: true, message: "Successful", data: updateCart });
  }

  catch (error) {
    console.log(error);
    return res.status(500).send({ status: false, message: error.message });
  }
}

//=====================================================UPDATE CART=====================================================
const updateCart  = async function(req, res){
  try{
    let userId = req.user._id

    //Validation of requeat body
    if(!isValidRequest(req.body)){
      return res
        .status(400)
        .send({ status: false, message: "Enter valid input" });
    }
    let {cartId, productId, removeProduct} = req.body
    //validation of cartId
    if(!cartId){
      return res
        .status(400)
        .send({ status: false, message: "cartId is required to update the cart" });
    }
    if(!isValidId(cartId)){
      return res
        .status(400)
        .send({ status: false, message: "Enter valid cartId one that is geenrated by mongodb" });
    }

    //Searching for cart with the Id
    let cartExist = await cartModel.findOne({_id: cartId, totalItems:{$gt:0}})
    if(!cartExist){
      return res
        .status(404)
        .send({ status: false, message: "No product exist in cart" })
    }

    //Matching the userId in params with the one in cart document
    let cartUserId = cartExist.userId.toString()
    if(cartUserId != userId){
      return res
        .status(400)
        .send({ status: false, message: "This cart is not for the same user logged in" })
    }

    //Validation of ProductId
    if(!productId){
      return res
        .status(400)
        .send({ status: false, message: "Product Id is required to remove the product" })
    }
    if(!isValidId(productId)){
      return res
        .status(400)
        .send({ status: false, message: "Enter valid productId as generated by mongodb" })
    }

    //validation of key used to remove the Product
    if(removeProduct == undefined){
      return res
        .status(400)
        .send({ status: false, message: "Removeproduct key is required to remove the product or decrease the quantity of product" })
    }
    if(!([1,0].includes(removeProduct))){
      return res
        .status(400)
        .send({ status: false, message: "either whole product when 0 or only one quantity can be deleted when 1" })
    }

    //Searching for product in product Model
    const product = await productModel.findOne({_id: productId})
    if(!product){
       return res
        .status(404)
        .send({ status: false, message: "Product not found" })
    }

    let flag =0
    for(i=0; i<cartExist.items.length; i++){
      let eleProductId = cartExist.items[i].productId.toString()
      if(eleProductId == productId){
        flag =1
        if(removeProduct == 0){
          //totalPrice update
          cartExist.totalPrice -= cartExist.items[i]. quantity * product.price
          //totalItems update
          cartExist.totalItems -= 1
          //deleting whole product
          cartExist.items.splice(i,1)
        }else if(removeProduct == 1){
          //totalPrice Update
          cartExist.totalPrice -= product.price
          //Product quantity update
          cartExist.items[i].quantity--
          if(cartExist.items[i].quantity == 0){
            //totalItems update
            cartExist.totalItems  -= 1
            //deleting whole product
            cartExist.items.splice(i,1)
          }
        }
      }
    }
      if(flag == 0){
        return res
          .status(400)
          .send({ status: false, message: "Product does not exist in the cart" })
      }
      const cart = await cartModel.findOneAndUpdate({_id: cartId},{$set:cartExist},{new: true}).populate({path:'items.productId',select:{_id: 1,title:1, price: 1,productImage:1, description:1}})
    
        return res
          .status(200)
          .send({ status: true, message: "Success", data: cart })
  }
  catch(error){
    return res
        .status(500)
        .send({status: false, message: error.message})
  }
}

//=====================================================GET CART=====================================================
const getCart =  async function(req, res){
  try{
      let userId = req.user._id
      const getData = await cartModel.findOne({userId : userId}).populate({path:'items.productId',select:{_id: 1,title:1, price: 1,productImage:1, description:1}})
      if(!getData){
        return res
          .status(404)
          .send({ status: false, message: "No product found in the cart" })
      }
      return res
          .status(200)
          .send({ status: true, message: "Successful", data: getData })
  }
  catch(error){
    return res
        .status(500)
        .send({status: false, message: error.message})
  }
}

//=====================================================DELETE CART=====================================================
const deleteCart = async function(req, res){
  try{
      let userId = req.user._id
      let data ={userId: userId, totalItems:0, totalPrice:0, items:[]}

      const delCart = await cartModel.findOneAndUpdate({userId: userId, totalItems:{$gt: 0}},{$set: data},{new: true})
      if(!delCart){
        return res
          .status(400)
          .send({ status: false, message: "No cart found for this user or no product exist in the cart" })
      }
      return res.status(204).send({status: true, message:"Successfully Deleted", data:delCart})
  }
  catch(error){
    return res
        .status(500)
        .send({status: false, message: error.message})
  }
}
module.exports = { addToCart,
                  updateCart,
                  getCart,
                  deleteCart}
